{"version":3,"file":"static/js/713.b24195a8.chunk.js","mappings":"8LAYaA,GAAMC,EAAAA,EAAAA,IAAO,MAAPA,CACjBC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,K,oMCjBWC,GAAYT,EAAAA,EAAAA,IAAOU,EAAAA,GAAPV,CAAH,2HAOTW,GAAQX,EAAAA,EAAAA,IAAOY,EAAAA,GAAPZ,CAAH,0TAgBLa,EAAYb,EAAAA,GAAAA,IAAH,wDAITc,EAASd,EAAAA,GAAAA,OAAH,+S,2DCpBbe,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KACPG,SAAUH,EAAAA,OAGRI,GAAkB,EAEhBC,EAAc,SAAC,GAAkB,IAAbC,EAAY,oBACpC,GAAgBC,EAAAA,EAAAA,IAASD,GAAlBE,GAAP,eAMA,OAJEJ,EADkB,KAAhBI,EAAMC,OAMR,+BACE,SAACd,GAAD,kBAAWa,GAAWF,OAKtBI,EAAY,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnB,OAAO,SAAC,KAAD,CAAcA,KAAMA,EAAMC,OAAQ,SAAAC,GAAO,OAAI,yBAAMA,QAG/CC,EAAY,WAAO,IAK1BC,EAAY,OAAG,WAAMC,EAEnBC,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,mCAAG,gGAASjB,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,SAAciB,EAA9B,EAA8BA,UAA9B,SAEXC,EAAU,CACdnB,MAAAA,EACAC,SAAAA,GAEmB,UAAjBY,EANa,uBAOfE,EAASK,EAAAA,GAAAA,MAAqBD,IAC9BD,IACAG,EAAAA,GAAAA,QAAc,iBATC,6BAYI,UAAjBR,EAZa,wBAafK,IAbe,6EAiBjBI,QAAQC,IAAR,MAjBiB,0DAAH,wDAoBZC,EAAQ,CAAEzC,MAAO,QAAS0C,KAAM,QAEtC,OACE,2BACE,SAAC5C,EAAA,EAAD,CAAK6C,QAAQ,OAAOC,eAAe,SAASC,WAAW,SAASC,GAAI,GAApE,UACE,SAAC,KAAD,CACEC,cAlCc,CACpB9B,MAAO,GACPC,SAAU,IAiCJ8B,iBAAkBlC,EAClBmC,SAAUf,EAHZ,SAKG,gBAAGgB,EAAH,EAAGA,aAAH,IAAiBC,OAAUlC,EAA3B,EAA2BA,MAAOC,EAAlC,EAAkCA,SAAlC,OACC,UAACV,EAAD,YACE,SAACY,EAAD,CACEgC,KAAK,OACL1B,KAAK,QACLF,MAAOP,EACPoC,SAAUH,EACVI,YAAY,WAEd,SAAC7B,EAAD,CAAWC,KAAK,QAAQ6B,UAAU,SAElC,SAAC7C,EAAD,CACE0C,KAAK,WACL1B,KAAK,WACLF,MAAON,EACPmC,SAAUH,EACVI,YAAY,cAEd,SAAC7B,EAAD,CAAWC,KAAK,WAAW6B,UAAU,SAErC,UAAC3C,EAAD,YACE,UAACC,EAAD,CACEuC,KAAK,SACLI,QAAS,WACP1B,EAAe,SAHnB,WAME,SAAC,MAAD,CAASW,MAAOA,IANlB,WASCtB,IACC,UAACN,EAAD,CACEuC,KAAK,SACLK,QAAQ,YACRzD,MAAM,YACNwD,QAAS,WACP1B,EAAe,SALnB,WAQE,SAAC,MAAD,CAAuBW,MAAOA,IARhC,yBAqBlB","sources":["components/Box.js","components/views/LoginView/LoginView.styled.js","components/views/LoginView/LoginView.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position\n);\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FormStyle = styled(Form)`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  border-radius: 4px;\n`;\nexport const Input = styled(Field)`\n  display: inline-block;\n  width: 100%;\n  height: 40px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  outline: none;\n  border: 1px solid grey;\n  font-size: 16px;\n  font-family: inherit;\n  :hover,\n  :focus {\n    border: 2px solid #719ece;\n    box-shadow: 0 0 5pt 0.5pt #999;\n  }\n`;\nexport const ButtonBox = styled.div`\n  display: flex;\n  gap: 10px;\n`;\nexport const Button = styled.button`\n  margin: 0 auto;\n  width: 50%;\n  height: 40px;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 2px;\n  border: none;\n  color: white;\n  background-color: #219df3;\n  &:nth-child(2) {\n    background-color: #eb3941;\n  }\n`;\n","import { Formik, ErrorMessage, useField } from 'formik';\nimport * as yup from 'yup';\nimport { FormStyle, Input, Button, ButtonBox } from './LoginView.styled';\nimport { MdRemoveCircleOutline, MdLogin } from 'react-icons/md';\nimport { authOperations } from 'redux/user';\nimport { useDispatch } from 'react-redux';\nimport toast from 'react-hot-toast';\nimport { Box } from 'components/Box';\n\n\nconst schema = yup.object().shape({\n  email: yup.string(),\n  password: yup.string(),\n});\n\nlet showResetButton = false;\n\nconst MyTextField = ({ ...props }) => {\n  const [field] = useField(props);\n  if (field.value !== '') {\n    showResetButton = true;\n  } else {\n    showResetButton = false;\n  }\n  return (\n    <>\n      <Input {...field} {...props} />\n    </>\n  );\n};\n\nconst FormError = ({ name }) => {\n  return <ErrorMessage name={name} render={message => <div>{message}</div>} />;\n};\n\nexport const LoginView = () => {\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n  let submitAction = '' ?? undefined;\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = async ({ email, password }, { resetForm }) => {\n    try {\n      const newUser = {\n        email,\n        password,\n      };\n      if (submitAction === 'login') {\n        dispatch(authOperations.logIn(newUser));\n        resetForm();\n        toast.success('Welcome back!');\n        return;\n      }\n      if (submitAction === 'reset') {\n        resetForm();\n        return;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const style = { color: 'white', size: '30px' };\n\n  return (\n    <main>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" pt={40}>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={schema}\n          onSubmit={handleSubmit}\n        >\n          {({ handleChange, values: { email, password } }) => (\n            <FormStyle>\n              <MyTextField\n                type=\"text\"\n                name=\"email\"\n                value={email}\n                onChange={handleChange}\n                placeholder=\"Email\"\n              />\n              <FormError name=\"email\" component=\"div\" />\n\n              <Input\n                type=\"password\"\n                name=\"password\"\n                value={password}\n                onChange={handleChange}\n                placeholder=\"Password\"\n              />\n              <FormError name=\"password\" component=\"div\" />\n\n              <ButtonBox>\n                <Button\n                  type=\"submit\"\n                  onClick={() => {\n                    submitAction = 'login';\n                  }}\n                >\n                  <MdLogin style={style} />\n                  Login\n                </Button>\n                {showResetButton && (\n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => {\n                      submitAction = 'reset';\n                    }}\n                  >\n                    <MdRemoveCircleOutline style={style} />\n                    Reset\n                  </Button>\n                )}\n              </ButtonBox>\n            </FormStyle>\n          )}\n        </Formik>\n      </Box>\n    </main>\n  );\n};\n\nexport default LoginView;\n"],"names":["Box","styled","color","space","layout","flexbox","grid","background","border","position","FormStyle","Form","Input","Field","ButtonBox","Button","schema","yup","shape","email","password","showResetButton","MyTextField","props","useField","field","value","FormError","name","render","message","LoginView","submitAction","undefined","dispatch","useDispatch","handleSubmit","resetForm","newUser","authOperations","toast","console","log","style","size","display","justifyContent","alignItems","pt","initialValues","validationSchema","onSubmit","handleChange","values","type","onChange","placeholder","component","onClick","variant"],"sourceRoot":""}