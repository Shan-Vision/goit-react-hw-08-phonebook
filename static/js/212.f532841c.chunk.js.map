{"version":3,"file":"static/js/212.f532841c.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/FilterContacts/FilterContacts.styled.js","components/FilterContacts/FilterContacts.jsx","components/views/ContactsView/ContactsViews.styled.js","components/views/ContactsView/ContactsView.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FormStyle = styled(Form)`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  border-radius: 4px;\n`;\nexport const Input = styled(Field)`\n  display: inline-block;\n  width: 100%;\n  height: 40px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  outline: none;\n  border: 1px solid grey;\n  font-size: 16px;\n  font-family: inherit;\n  :hover,\n  :focus {\n    border: 2px solid #719ece;\n    box-shadow: 0 0 5pt 0.5pt #999;\n  }\n`;\n\nexport const ButtonBox = styled.div`\n  display: flex;\n  gap: 10px;\n`;\nexport const Button = styled.button`\n  height: 40px;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  gap: 2px;\n  border: none;\n  color: white;\n  background-color: #219df3;\n  &:nth-child(2) {\n    background-color: #eb3941;\n  }\n`;\n","import { Formik, ErrorMessage, useField } from 'formik';\nimport NumberFormat from 'react-number-format';\nimport { FormStyle, Input, Button, ButtonBox } from './ContactForm.styled';\nimport * as yup from 'yup';\nimport toast from 'react-hot-toast';\nimport { MdRemoveCircleOutline, MdDone } from 'react-icons/md';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: yup.string(),\n});\n\nconst InputNumberFormat = ({ field, ...props }) => (\n  <NumberFormat\n    {...field}\n    {...props}\n    format=\"+46 (##) ###-##-##\"\n    mask=\"_\"\n    allowEmptyFormatting\n  />\n);\n\nlet showResetButton = false;\nconst MyTextField = ({ ...props }) => {\n  const [field] = useField(props);\n  if (field.value !== '') {\n    showResetButton = true;\n  } else {\n    showResetButton = false;\n  }\n  return (\n    <>\n      <Input {...field} {...props} />\n    </>\n  );\n};\n\nconst FormError = ({ name }) => {\n  return <ErrorMessage name={name} render={message => <div>{message}</div>} />;\n};\n\nconst ContactForm = () => {\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getContacts);\n\n  let submitAction = '' ?? undefined;\n\n  const handleSubmit = async ({ name, number }, { resetForm }) => {\n    const nameList = contacts?.map(contact => contact.name.toLowerCase());\n\n    if (!nameList) {\n      return;\n    }\n\n    const findIncludeName = !nameList.filter(\n      item => item.toLowerCase() === name.toLowerCase()\n    ).length;\n\n    try {\n      const newContact = {\n        name,\n        number,\n      };\n\n      if (submitAction === 'primary' && findIncludeName) {\n        dispatch(contactsOperations.addContact(newContact));\n        resetForm();\n        toast.success(`New contacts has been successfully added`);\n        return;\n      } else if (submitAction === 'secondary') {\n        toast.success(`Reset was succeessfully completed`);\n        resetForm({ name: '', number: '' });\n        return;\n      } else {\n        return toast.error(`${name} is already in contacts`);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const style = { color: 'white', size: '30px' };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      {({ handleChange, values: { name, number } }) => (\n        <FormStyle>\n          <h3>New Contact</h3>\n          <MyTextField\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            placeholder=\"Name\"\n          />\n          <FormError name=\"name\" component=\"div\" />\n\n          <Input\n            type=\"text\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            // placeholder=\"Number\"\n            component={InputNumberFormat}\n          />\n          <FormError name=\"number\" component=\"div\" />\n          <ButtonBox>\n            <Button\n              type=\"submit\"\n              onClick={() => {\n                submitAction = 'primary';\n              }}\n            >\n              <MdDone style={style} />\n              Add contact\n            </Button>\n            {showResetButton && (\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => {\n                  submitAction = 'secondary';\n                }}\n              >\n                <MdRemoveCircleOutline style={style} />\n                Reset\n              </Button>\n            )}\n          </ButtonBox>\n        </FormStyle>\n      )}\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\nexport const Head = styled.thead``;\n\nexport const HeadRow = styled.tr`\n  background: #f3f3f3;\n`;\nexport const HeadRowTitle = styled.th`\n  text-align: left;\n  font-size: 18px;\n  height: 40px;\n  padding-left: 8px;\n`;\n","import styled from 'styled-components';\n\nexport const BodyRow = styled.tr`\n  &:nth-child(even) {\n    background-color: #f3f3f3;\n  }\n`;\n\nexport const BodyRowTitle = styled.td`\n  height: 30px;\n`;\n","import { BodyRowTitle, BodyRow } from './ContactItem.styled';\nimport PropTypes from 'prop-types';\nimport { IoPerson, IoPhonePortrait } from 'react-icons/io5';\nimport { RiDeleteBin6Fill } from 'react-icons/ri';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport IconButton from 'components/IconButton';\nimport toast from 'react-hot-toast';\nimport { useDispatch } from 'react-redux';\n\nconst ContactItem = ({ values: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  return (\n    <BodyRow>\n      <BodyRowTitle>\n        <IoPerson style={{ marginRight: '6px' }} />\n        {name}\n      </BodyRowTitle>\n      <BodyRowTitle>\n        <IoPhonePortrait style={{ marginRight: '6px' }} />\n        {number}\n      </BodyRowTitle>\n      <BodyRowTitle>\n        <IconButton\n          onClick={() => {\n            dispatch(deleteContact(id));\n            toast.success('Contact was successfully deleted');\n          }}\n        >\n          <RiDeleteBin6Fill size={22} />\n        </IconButton>\n      </BodyRowTitle>\n    </BodyRow>\n  );\n};\n\nContactItem.propTypes = {\n  values: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\nexport default ContactItem;\n\n/* <RiDeleteBin6Fill\n    onClick={() => {\n      deleteContact(id);\n      toast.success('Contact was successfully deleted');\n    }}\n    style={{ cursor: 'pointer' }}\n  /> */\n","import { HeadRow, Head, Table, HeadRowTitle } from './ContactList.styled';\nimport ContactItem from 'components/ContactItem';\n\nconst ContactList = ({ contacts }) => {\n  return (\n    <>\n      <Table>\n        <Head>\n          <HeadRow>\n            <HeadRowTitle>Name</HeadRowTitle>\n            <HeadRowTitle>Phone</HeadRowTitle>\n            <HeadRowTitle></HeadRowTitle>\n          </HeadRow>\n        </Head>\n        <tbody>\n          {contacts.map(contact => (\n            <ContactItem key={contact.id} values={contact} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const FilterBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  margin-bottom: 25px;\n`;\n\nexport const FilterInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  height: 40px;\n  margin-bottom: 20px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  outline: none;\n  border: 1px solid grey;\n  font-size: 16px;\n  font-family: inherit;\n  :hover,\n  :focus {\n    border: 2px solid #719ece;\n    box-shadow: 0 0 5pt 0.5pt #999;\n  }\n`;\n","import { FilterBox, FilterInput } from './FilterContacts.styled';\n\nconst FilterContacts = ({onChange: OnFilterChange}) => {\n  \n\n  return (\n    <FilterBox>\n      <FilterInput onChange={OnFilterChange} placeholder=\"Search Name\" />\n    </FilterBox>\n  );\n};\n\nexport default FilterContacts;\n","import styled from 'styled-components';\n\n\nexport const AppContainer = styled.div`\n  height: 100vh;\n  padding: 60px;\n  background-color: white;\n`;\nexport const MainContent = styled.div`\n  display: flex;\n  gap: 30px;\n`;\n\nexport const ContentBox = styled.div`\n  flex-grow: 1;\n`;\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport FilterContacts from 'components/FilterContacts';\nimport { AppContainer, MainContent, ContentBox } from './ContactsViews.styled';\nimport { getFilterContact, setFilterContact } from 'redux/filtereSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport { useMemo, useEffect } from 'react';\n\nexport const ContactsView = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getContacts);\n\n  const filter = useSelector(getFilterContact);\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const handleChange = event => {\n    const value = event.target.value;\n    dispatch(setFilterContact(value));\n  };\n\n  const filteredContacts = useMemo(() => {\n    return (\n      contacts?.filter(item =>\n        item.name.toLowerCase().includes(filter.toLowerCase())\n      ) ?? []\n    );\n  }, [contacts, filter]);\n\n  return (\n    <div>\n      <AppContainer>\n        <MainContent>\n          <ContactForm />\n          <ContentBox>\n            <FilterContacts onChange={handleChange} />\n            {contacts && <ContactList contacts={filteredContacts} />}\n          </ContentBox>\n        </MainContent>\n      </AppContainer>\n    </div>\n  );\n};\n\nexport default ContactsView;\n"],"names":["FormStyle","styled","Form","Input","Field","ButtonBox","Button","schema","yup","shape","name","matches","number","InputNumberFormat","field","props","format","mask","allowEmptyFormatting","showResetButton","MyTextField","useField","value","FormError","render","message","dispatch","useDispatch","contacts","useSelector","contactsSelectors","submitAction","undefined","handleSubmit","resetForm","nameList","map","contact","toLowerCase","findIncludeName","filter","item","length","newContact","contactsOperations","toast","console","log","style","color","size","initialValues","onSubmit","validationSchema","handleChange","values","type","onChange","placeholder","component","onClick","variant","Table","Head","HeadRow","HeadRowTitle","BodyRow","BodyRowTitle","id","marginRight","IconButton","deleteContact","FilterBox","FilterInput","OnFilterChange","AppContainer","MainContent","ContentBox","ContactsView","getFilterContact","useEffect","filteredContacts","useMemo","includes","event","target","setFilterContact"],"sourceRoot":""}