{"version":3,"file":"static/js/714.429dd108.chunk.js","mappings":"iQAGaA,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,2HAOTE,GAAQF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,0TAgBLI,EAASJ,EAAAA,GAAAA,OAAH,sP,uCCnBbK,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEJC,MAAOJ,EAAAA,KACPK,SAAUL,EAAAA,OAGNM,EAAY,SAAC,GAAc,IAAZJ,EAAW,EAAXA,KACnB,OAAO,SAAC,KAAD,CAAcA,KAAMA,EAAMK,OAAQ,SAAAC,GAAO,OAAI,yBAAMA,QAoE5D,EAjEqB,WACnB,IAKMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,mCAAG,+FAAST,EAAT,EAASA,KAAME,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,SAAcO,EAApC,EAAoCA,UACvD,IACQC,EAAU,CACdX,KAAAA,EACAE,MAAAA,EACAC,SAAAA,GAGFI,EAASK,EAAAA,GAAAA,SAAwBD,IACjCD,IACAG,EAAAA,GAAAA,QAAc,4BACd,MAAOC,GACPC,QAAQC,IAAIF,GAZK,2CAAH,wDAelB,OACE,SAAC,KAAD,CACEG,cAxBkB,CACpBjB,KAAM,GACNE,MAAO,GACPC,SAAU,IAsBRe,iBAAkBrB,EAClBsB,SAAUV,EAHZ,SAKG,gBAAGW,EAAH,EAAGA,aAAH,IAAiBC,OAAUrB,EAA3B,EAA2BA,KAAME,EAAjC,EAAiCA,MAAOC,EAAxC,EAAwCA,SAAxC,OACC,UAACZ,EAAD,YACE,SAACG,EAAD,CACE4B,KAAK,OACLtB,KAAK,OACLuB,MAAOvB,EACPwB,SAAUJ,EACVK,YAAY,UAEd,SAACrB,EAAD,CAAWJ,KAAK,OAAO0B,UAAU,SACjC,SAAChC,EAAD,CACE4B,KAAK,OACLtB,KAAK,QACLuB,MAAOrB,EACPsB,SAAUJ,EACVK,YAAY,WAEd,SAACrB,EAAD,CAAWJ,KAAK,QAAQ0B,UAAU,SAElC,SAAChC,EAAD,CACEiC,aAAa,OACbL,KAAK,WACLtB,KAAK,WACLuB,MAAOpB,EACPqB,SAAUJ,EACVK,YAAY,cAEd,SAACrB,EAAD,CAAWJ,KAAK,WAAW0B,UAAU,SAErC,SAAC9B,EAAD,CAAQ0B,KAAK,SAAb","sources":["components/views/RegisterView/RegisterView.styled.js","components/views/RegisterView/RegisterView.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FormStyle = styled(Form)`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  border-radius: 4px;\n`;\nexport const Input = styled(Field)`\n  display: inline-block;\n  width: 100%;\n  height: 40px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  outline: none;\n  border: 1px solid grey;\n  font-size: 16px;\n  font-family: inherit;\n  :hover,\n  :focus {\n    border: 2px solid #719ece;\n    box-shadow: 0 0 5pt 0.5pt #999;\n  }\n`;\nexport const Button = styled.button`\n  margin: 0 auto;\n  width: 50%;\n  height: 40px;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 2px;\n  border: none;\n  color: white;\n  background-color: #219df3;\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { FormStyle, Input, Button } from './RegisterView.styled';\nimport { authOperations } from 'redux/user';\nimport { useDispatch } from 'react-redux';\nimport toast from 'react-hot-toast';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  email: yup.string(),\n  password: yup.string(),\n});\n\nconst FormError = ({ name }) => {\n  return <ErrorMessage name={name} render={message => <div>{message}</div>} />;\n};\n\nconst RegisterView = () => {\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n  const dispatch = useDispatch();\n\n  const handleSubmit = async ({ name, email, password }, { resetForm }) => {\n    try {\n      const newUser = {\n        name,\n        email,\n        password,\n      };\n\n      dispatch(authOperations.register(newUser));\n      resetForm();\n      toast.success('Registration is complete');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      {({ handleChange, values: { name, email, password } }) => (\n        <FormStyle>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            placeholder=\"Name\"\n          />\n          <FormError name=\"name\" component=\"div\" />\n          <Input\n            type=\"text\"\n            name=\"email\"\n            value={email}\n            onChange={handleChange}\n            placeholder=\"Email\"\n          />\n          <FormError name=\"email\" component=\"div\" />\n\n          <Input\n            autoComplete=\"true\"\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={handleChange}\n            placeholder=\"Password\"\n          />\n          <FormError name=\"password\" component=\"div\" />\n\n          <Button type=\"submit\">Sign up</Button>\n        </FormStyle>\n      )}\n    </Formik>\n  );\n};\n\nexport default RegisterView;\n"],"names":["FormStyle","styled","Form","Input","Field","Button","schema","yup","shape","name","matches","email","password","FormError","render","message","dispatch","useDispatch","handleSubmit","resetForm","newUser","authOperations","toast","error","console","log","initialValues","validationSchema","onSubmit","handleChange","values","type","value","onChange","placeholder","component","autoComplete"],"sourceRoot":""}