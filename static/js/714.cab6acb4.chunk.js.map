{"version":3,"file":"static/js/714.cab6acb4.chunk.js","mappings":"8LAYaA,GAAMC,EAAAA,EAAAA,IAAO,MAAPA,CACjBC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,K,oKCjBWC,GAAYT,EAAAA,EAAAA,IAAOU,EAAAA,GAAPV,CAAH,2HAOTW,GAAQX,EAAAA,EAAAA,IAAOY,EAAAA,GAAPZ,CAAH,0TAgBLa,EAAYb,EAAAA,GAAAA,IAAH,wDAITc,EAASd,EAAAA,GAAAA,OAAH,+S,2DCrBbe,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEJC,MAAOJ,EAAAA,KACPK,SAAUL,EAAAA,OAGRM,GAAkB,EAEhBC,EAAc,SAAC,GAAkB,IAAbC,EAAY,oBACpC,GAAgBC,EAAAA,EAAAA,IAASD,GAAlBE,GAAP,eAMA,OAJEJ,EADkB,KAAhBI,EAAMC,OAMR,+BACE,SAAChB,GAAD,kBAAWe,GAAWF,OAItBI,EAAY,SAAC,GAAc,IAAZV,EAAW,EAAXA,KACnB,OAAO,SAAC,KAAD,CAAcA,KAAMA,EAAMW,OAAQ,SAAAC,GAAO,OAAI,yBAAMA,QAyG5D,EAtGqB,WAAO,IAMpBC,GAAWC,EAAAA,EAAAA,MACbC,EAAY,OAAG,WAAMC,EAEnBC,EAAY,mCAAG,kGAASjB,EAAT,EAASA,KAAME,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,SAAce,EAApC,EAAoCA,UAApC,SAEXC,EAAU,CACdnB,KAAAA,EACAE,MAAAA,EACAC,SAAAA,GAEmB,WAAjBY,EAPa,uBAQfF,EAASO,EAAAA,GAAAA,SAAwBD,IACjCD,IACAG,EAAAA,GAAAA,QAAA,kBAAyBrB,IAVV,6BAaI,UAAjBe,EAba,wBAcfG,IAde,6EAkBjBI,QAAQC,IAAR,MAlBiB,0DAAH,wDAsBZC,EAAQ,CAAEzC,MAAO,QAAS0C,KAAM,QAEtC,OACE,2BACE,SAAC5C,EAAA,EAAD,CAAK6C,QAAQ,OAAOC,eAAe,SAASC,WAAW,SAASC,GAAI,GAApE,UACE,SAAC,KAAD,CACEC,cApCc,CACpB9B,KAAM,GACNE,MAAO,GACPC,SAAU,IAkCJ4B,iBAAkBlC,EAClBmC,SAAUf,EAHZ,SAKG,gBAAGgB,EAAH,EAAGA,aAAH,IAAiBC,OAAUlC,EAA3B,EAA2BA,KAAME,EAAjC,EAAiCA,MAAOC,EAAxC,EAAwCA,SAAxC,OACC,UAACZ,EAAD,YACE,SAACc,EAAD,CACE8B,KAAK,OACLnC,KAAK,OACLS,MAAOT,EACPoC,SAAUH,EACVI,YAAY,UAEd,SAAC3B,EAAD,CAAWV,KAAK,OAAOsC,UAAU,SACjC,SAACjC,EAAD,CACE8B,KAAK,OACLnC,KAAK,QACLS,MAAOP,EACPkC,SAAUH,EACVI,YAAY,WAEd,SAAC3B,EAAD,CAAWV,KAAK,QAAQsC,UAAU,SAElC,SAACjC,EAAD,CACEkC,aAAa,OACbJ,KAAK,WACLnC,KAAK,WACLS,MAAON,EACPiC,SAAUH,EACVI,YAAY,cAEd,SAAC3B,EAAD,CAAWV,KAAK,WAAWsC,UAAU,SAErC,UAAC3C,EAAD,YACE,UAACC,EAAD,CACEuC,KAAK,SACLK,QAAS,WACPzB,EAAe,UAHnB,WAME,SAAC,MAAD,CAASS,MAAOA,IANlB,aASCpB,IACC,UAACR,EAAD,CACEuC,KAAK,SACLM,QAAQ,YACR1D,MAAM,YACNyD,QAAS,WACPzB,EAAe,SALnB,WAQE,SAAC,MAAD,CAAuBS,MAAOA,IARhC","sources":["components/Box.js","components/views/RegisterView/RegisterView.styled.js","components/views/RegisterView/RegisterView.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position\n);\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FormStyle = styled(Form)`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  border-radius: 4px;\n`;\nexport const Input = styled(Field)`\n  display: inline-block;\n  width: 100%;\n  height: 40px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  outline: none;\n  border: 1px solid grey;\n  font-size: 16px;\n  font-family: inherit;\n  :hover,\n  :focus {\n    border: 2px solid #719ece;\n    box-shadow: 0 0 5pt 0.5pt #999;\n  }\n`;\nexport const ButtonBox = styled.div`\n  display: flex;\n  gap: 10px;\n`;\nexport const Button = styled.button`\n  margin: 0 auto;\n  width: 50%;\n  height: 40px;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 2px;\n  border: none;\n  color: white;\n  background-color: #219df3;\n  &:nth-child(2) {\n    background-color: #eb3941;\n  }\n`;\n","import { Formik, ErrorMessage, useField } from 'formik';\nimport * as yup from 'yup';\nimport { FormStyle, Input, Button, ButtonBox } from './RegisterView.styled';\nimport { authOperations } from 'redux/user';\nimport { useDispatch } from 'react-redux';\nimport toast from 'react-hot-toast';\nimport { MdRemoveCircleOutline, MdLogin } from 'react-icons/md';\nimport { Box } from 'components/Box';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  email: yup.string(),\n  password: yup.string(),\n});\n\nlet showResetButton = false;\n\nconst MyTextField = ({ ...props }) => {\n  const [field] = useField(props);\n  if (field.value !== '') {\n    showResetButton = true;\n  } else {\n    showResetButton = false;\n  }\n  return (\n    <>\n      <Input {...field} {...props} />\n    </>\n  );\n};\nconst FormError = ({ name }) => {\n  return <ErrorMessage name={name} render={message => <div>{message}</div>} />;\n};\n\nconst RegisterView = () => {\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n  const dispatch = useDispatch();\n  let submitAction = '' ?? undefined;\n\n  const handleSubmit = async ({ name, email, password }, { resetForm }) => {\n    try {\n      const newUser = {\n        name,\n        email,\n        password,\n      };\n      if (submitAction === 'signup') {\n        dispatch(authOperations.register(newUser));\n        resetForm();\n        toast.success(`Welcome ${name}`);\n        return;\n      }\n      if (submitAction === 'reset') {\n        resetForm();\n        return;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const style = { color: 'white', size: '30px' };\n\n  return (\n    <main>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" pt={40}>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={schema}\n          onSubmit={handleSubmit}\n        >\n          {({ handleChange, values: { name, email, password } }) => (\n            <FormStyle>\n              <MyTextField\n                type=\"text\"\n                name=\"name\"\n                value={name}\n                onChange={handleChange}\n                placeholder=\"Name\"\n              />\n              <FormError name=\"name\" component=\"div\" />\n              <MyTextField\n                type=\"text\"\n                name=\"email\"\n                value={email}\n                onChange={handleChange}\n                placeholder=\"Email\"\n              />\n              <FormError name=\"email\" component=\"div\" />\n\n              <MyTextField\n                autoComplete=\"true\"\n                type=\"password\"\n                name=\"password\"\n                value={password}\n                onChange={handleChange}\n                placeholder=\"Password\"\n              />\n              <FormError name=\"password\" component=\"div\" />\n\n              <ButtonBox>\n                <Button\n                  type=\"submit\"\n                  onClick={() => {\n                    submitAction = 'signup';\n                  }}\n                >\n                  <MdLogin style={style} />\n                  Sign up\n                </Button>\n                {showResetButton && (\n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => {\n                      submitAction = 'reset';\n                    }}\n                  >\n                    <MdRemoveCircleOutline style={style} />\n                    Reset\n                  </Button>\n                )}\n              </ButtonBox>\n            </FormStyle>\n          )}\n        </Formik>\n      </Box>\n    </main>\n  );\n};\n\nexport default RegisterView;\n"],"names":["Box","styled","color","space","layout","flexbox","grid","background","border","position","FormStyle","Form","Input","Field","ButtonBox","Button","schema","yup","shape","name","matches","email","password","showResetButton","MyTextField","props","useField","field","value","FormError","render","message","dispatch","useDispatch","submitAction","undefined","handleSubmit","resetForm","newUser","authOperations","toast","console","log","style","size","display","justifyContent","alignItems","pt","initialValues","validationSchema","onSubmit","handleChange","values","type","onChange","placeholder","component","autoComplete","onClick","variant"],"sourceRoot":""}